{{#gt (length missingSongs) 0 }}
<div class="alert alert-warning" role="alert">
    <h4 class="alert-heading">Warning</h4>
    <p>The following songs have been ommitted due to insuficient data available from Spotify. This usually happens with really old songs or songs that were added locally (e.g. songs that are not on Spotify):</p>
    <hr>
    <p class="mb-0">
        <ul>
            {{#each missingSongs }}
            <li>{{this}}</li>
            {{/each}}
        </ul>
    </p>
</div>
{{/gt}}
<div class="container-fluid mt-3 text-right">
    <a href="/flow/create" class="btn btn-primary btn-lg active next-btn" role="button" aria-pressed="true">Create
        playlist</a>
    <a href="/api/overwrite-playlist" class="btn btn-danger btn-lg active next-btn" role="button"
        aria-pressed="true">Overwrite playlist</a>
</div>
<div class="container-fluid">
    <table class="table table-hover">
        <thead>
            <tr>
                <th scope="col">Name</th>
                <th scope="col">Artist</th>
                <th scope="col">Danceability</th>
                <th scope="col">Energy</th>
                <th scope="col">Key</th>
                <th scope="col">Mode</th>
                <th scope="col">Tempo</th>
            </tr>
        </thead>
        <tbody>
            {{#each songs }}
            <tr data-id="{{this.track.id}}">
                <td data-name="name" data-value="{{this.track.name}}">{{this.track.name}}</td>
                <td data-name="artists" data-value="{{join this.artists}}">{{join this.artists}}</td>
                <td data-name="danceability" data-value="{{this.danceability}}">{{this.danceability}}</td>
                <td data-name="energy" data-value="{{this.energy}}">{{this.energy}}</td>
                <td data-name="key" data-value="{{this.key}}">{{this.key}}</td>
                <td data-name="mode" data-value="{{this.mode}}">{{this.mode}}</td>
                <td data-name="tempo" data-value="{{this.tempo}}">{{this.tempo}} BPM</td>
            </tr>
            {{/each}}
        </tbody>
    </table>
</div>

<script>
    let activeCell = "";
    let sameKey = [];
    let similarKey = [];
    let slightSimilarKey = [];

    document.addEventListener("DOMContentLoaded", () => {
        document.querySelectorAll("tr[data-id]").forEach((element) => {
            element.addEventListener("click", function () {
                const id = this.getAttribute("data-id");
                const name = this.querySelector("td[data-name='name']").getAttribute("data-value");
                const key = this.querySelector("td[data-name='key']").getAttribute("data-value");
                const mode = this.querySelector("td[data-name='mode']").getAttribute("data-value");

                if (activeCell) {
                    document.querySelector(`tr[data-id='${activeCell}']`).removeAttribute("class");
                }

                findSimilar(id, key, mode);

                activeCell = id;

                this.setAttribute("class", "text-primary font-weight-bold");
            });
        });
    });

    function findSimilar(id, key, mode) {
        [...sameKey, ...similarKey, ...slightSimilarKey].forEach((id) => {
            document.querySelector(`tr[data-id='${id}']`).removeAttribute("class");
        });

        sameKey = [];
        similarKey = [];
        slightSimilarKey = [];

        const keyData = camelot(key, mode);

        document.querySelectorAll("tr[data-id]").forEach((element) => {
            const targetId = element.getAttribute("data-id");
            const targetKey = element.querySelector("td[data-name='key']").getAttribute("data-value");
            const targetMode = element.querySelector("td[data-name='mode']").getAttribute("data-value");

            keyData.next.forEach((data) => {
                if (targetId != id && targetKey == data.key && targetMode == data.mode) {
                    sameKey.push(targetId);

                    document.querySelector(`tr[data-id='${targetId}']`).setAttribute("class", "table-success");
                }
            });

            keyData.skipNext.forEach((data) => {
                if (targetId != id && targetKey == data.key && targetMode == data.mode) {
                    similarKey.push(targetId);

                    document.querySelector(`tr[data-id='${targetId}']`).setAttribute("class", "table-warning");
                }
            });

            keyData.farNext.forEach((data) => {
                if (targetId != id && targetKey == data.key && targetMode == data.mode) {
                    slightSimilarKey.push(targetId);

                    document.querySelector(`tr[data-id='${targetId}']`).setAttribute("class", "table-danger");
                }
            });
        });
    }

    function camelot(key, mode) {
        let next, skipNext, farNext;

        const wheel = [
            [ // 1
                { key: "G#", mode: "Minor" }, // A
                { key: "B", mode: "Major" }   // B
            ],
            [ // 2
                { key: "D#", mode: "Minor" },
                { key: "F#", mode: "Major" }
            ],
            [ // 3
                { key: "A#", mode: "Minor" },
                { key: "C#", mode: "Major" }
            ],
            [ // 4
                { key: "F", mode: "Minor" },
                { key: "G#", mode: "Major" }
            ],
            [ // 5
                { key: "C", mode: "Minor" },
                { key: "D#", mode: "Major" }
            ],
            [ // 6
                { key: "G", mode: "Minor" },
                { key: "A#", mode: "Major" }
            ],
            [ // 7
                { key: "D", mode: "Minor" },
                { key: "F", mode: "Major" }
            ],
            [ // 8
                { key: "A", mode: "Minor" },
                { key: "C", mode: "Major" }
            ],
            [ // 9
                { key: "E", mode: "Minor" },
                { key: "G", mode: "Major" }
            ],
            [ // 10
                { key: "B", mode: "Minor" },
                { key: "D", mode: "Major" }
            ],
            [ // 11
                { key: "F#", mode: "Minor" },
                { key: "A", mode: "Major" }
            ],
            [ // 12
                { key: "C#", mode: "Minor" },
                { key: "E", mode: "Major" }
            ]
        ];

        let nestedIndex = -1;
        const index = wheel.findIndex((value) => {
            nestedIndex = value.findIndex((nestedValue) => nestedValue.key == key && nestedValue.mode == mode);

            if (nestedIndex < 0) {
                return false;
            } else {
                return true;
            }
        });

        next = [wheel[index][nestedIndex]];

        let adjecentIndexLeft = index === 0 ? wheel.length - 1 : index - 1;
        let adjecentIndexRight = index === wheel.length - 1 ? 0 : index + 1;
        let adjecentNestedIndex = nestedIndex === 0 ? 1 : 0;

        skipNext = [
            wheel[index][adjecentNestedIndex],
            wheel[adjecentIndexLeft][nestedIndex],
            wheel[adjecentIndexRight][nestedIndex]
        ];

        farNext = [
            wheel[adjecentIndexLeft][adjecentNestedIndex],
            wheel[adjecentIndexRight][adjecentNestedIndex]
        ];

        return { next, skipNext, farNext };
    }
</script>